import { CommonModule } from '@angular/common';
import { Component, inject, signal } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { ButtonModule } from 'primeng/button';
import { CheckboxModule } from 'primeng/checkbox';
import { InputTextModule } from 'primeng/inputtext';
import { PasswordModule } from 'primeng/password';
import { ToastService } from '../../services/toast.service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ButtonModule,
    InputTextModule,
    PasswordModule,
    CheckboxModule,
  ],
  templateUrl: './login.html',
  styleUrls: ['./login.css'],
})
export class LoginComponent {
  private _toastService = inject(ToastService);

  // Expose toast service for template
  public get toastService() {
    return this._toastService;
  }

  // Track focus state for form inputs
  usernameFocused = false;
  passwordFocused = false;

  credentials = signal({
    username: '',
    password: '',
  });

  // Validation state
  validation = signal({
    username: {
      touched: false,
      valid: true,
      message: '',
    },
    password: {
      touched: false,
      valid: true,
      message: '',
    },
  });

  rememberMe = false;
  isLoading = signal(false);
  showPassword = false;
  formSubmitted = signal(false);

  // Validation methods
  validateUsername(username: string) {
    if (!username.trim()) {
      return { valid: false, message: 'Username is required' };
    }
    if (username.length < 3) {
      return {
        valid: false,
        message: 'Username must be at least 3 characters',
      };
    }
    return { valid: true, message: '' };
  }

  validatePassword(password: string) {
    if (!password) {
      return { valid: false, message: 'Password is required' };
    }
    if (password.length < 6) {
      return {
        valid: false,
        message: 'Password must be at least 6 characters',
      };
    }
    return { valid: true, message: '' };
  }

  onUsernameChange(username: string) {
    const validation = this.validateUsername(username);
    this.validation.update(state => ({
      ...state,
      username: {
        touched: true,
        valid: validation.valid,
        message: validation.message,
      },
    }));
  }

  onPasswordChange(password: string) {
    const validation = this.validatePassword(password);
    this.validation.update(state => ({
      ...state,
      password: {
        touched: true,
        valid: validation.valid,
        message: validation.message,
      },
    }));
  }

  onLogin() {
    this.formSubmitted.set(true);

    const usernameValidation = this.validateUsername(
      this.credentials().username
    );
    const passwordValidation = this.validatePassword(
      this.credentials().password
    );

    // Update validation state
    this.validation.set({
      username: {
        touched: true,
        valid: usernameValidation.valid,
        message: usernameValidation.message,
      },
      password: {
        touched: true,
        valid: passwordValidation.valid,
        message: passwordValidation.message,
      },
    }); // Show validation errors as toast
    if (!usernameValidation.valid || !passwordValidation.valid) {
      const errors = [];
      if (!usernameValidation.valid) errors.push(usernameValidation.message);
      if (!passwordValidation.valid) errors.push(passwordValidation.message);

      this._toastService.showError(
        'Validation Error',
        `Please fix the following issues:\n• ${errors.join('\n• ')}`
      );
      return;
    }

    this.isLoading.set(true);

    // Simulate API call
    setTimeout(() => {
      this.isLoading.set(false);
      this._toastService.showSuccess(
        'Login Successful',
        `Welcome back, ${this.credentials().username}!`
      );
      // TODO: Implement actual authentication service call
    }, 2000);
  }

  onForgotPassword() {
    this._toastService.showInfo(
      'Password Reset',
      'Password reset functionality will be available soon.'
    );
  }

  onContactSupport() {
    this._toastService.showInfo(
      'Support Contact',
      'Support contact functionality will be available soon.'
    );
  }

  togglePasswordVisibility() {
    this.showPassword = !this.showPassword;
  }
}
