<div class="login-container">
  <div class="login-card">
    <!-- Header Section -->
    <div class="login-header">
      <div class="logo-section">
        <div class="app-logo">
          <svg
            class="logo-svg"
            viewBox="0 0 140 50"
            xmlns="http://www.w3.org/2000/svg"
          >
            <!-- Modern background with gradient -->
            <rect
              x="2"
              y="2"
              width="136"
              height="46"
              rx="23"
              fill="url(#logoGradient)"
              stroke="url(#logoBorder)"
              stroke-width="2"
            />
            <!-- AthletaX "X" logo -->
            <g transform="translate(25, 15)">
              <!-- First diagonal of X -->
              <rect
                x="-1.5"
                y="-10"
                width="3"
                height="20"
                rx="1.5"
                fill="#F59E0B"
                transform="rotate(45)"
              />
              <!-- Second diagonal of X -->
              <rect
                x="-1.5"
                y="-10"
                width="3"
                height="20"
                rx="1.5"
                fill="#10B981"
                transform="rotate(-45)"
              />

              <!-- Central highlight -->
              <circle cx="0" cy="0" r="2.5" fill="#FFF" opacity="0.6" />
            </g>

            <!-- Modern "A" for Athleta -->
            <g transform="translate(45, 12)">
              <path
                d="M0 26 L6 8 Q8 3 10 3 Q12 3 14 8 L20 26"
                stroke="#FFF"
                stroke-width="2.5"
                fill="none"
                stroke-linecap="round"
              />
              <rect x="5" y="18" width="10" height="2" fill="#FFF" rx="1" />
            </g>

            <!-- Dynamic swoosh -->
            <path
              d="M70 25 Q85 18 100 25 Q115 32 130 25"
              stroke="#F59E0B"
              stroke-width="2.5"
              fill="none"
              stroke-linecap="round"
              opacity="0.9"
            />

            <!-- Gradient definitions -->
            <defs>
              <linearGradient
                id="logoGradient"
                x1="0%"
                y1="0%"
                x2="100%"
                y2="100%"
              >
                <stop
                  offset="0%"
                  style="stop-color: #6366f1; stop-opacity: 0.95"
                />
                <stop
                  offset="50%"
                  style="stop-color: #8b5cf6; stop-opacity: 0.95"
                />
                <stop
                  offset="100%"
                  style="stop-color: #c084fc; stop-opacity: 0.95"
                />
              </linearGradient>
              <linearGradient
                id="logoBorder"
                x1="0%"
                y1="0%"
                x2="100%"
                y2="100%"
              >
                <stop
                  offset="0%"
                  style="stop-color: #f59e0b; stop-opacity: 0.8"
                />
                <stop
                  offset="100%"
                  style="stop-color: #10b981; stop-opacity: 0.8"
                />
              </linearGradient>
            </defs>
          </svg>
        </div>
        <div class="logo-icon">
          <div class="modern-geometric-icon">
            <svg
              viewBox="0 0 24 24"
              width="28"
              height="28"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <!-- Modern hexagon with inner star -->
              <path
                d="M12 2L21.5 7V17L12 22L2.5 17V7L12 2Z"
                fill="url(#iconGradient)"
                stroke="#FFF"
                stroke-width="1.5"
              />
              <path
                d="M12 6L16 8.5V15.5L12 18L8 15.5V8.5L12 6Z"
                fill="#FFF"
                opacity="0.3"
              />
              <path
                d="M12 9L14 10.5V13.5L12 15L10 13.5V10.5L12 9Z"
                fill="url(#centerGradient)"
              />

              <!-- Gradient definitions for the icon -->
              <defs>
                <linearGradient
                  id="iconGradient"
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" style="stop-color: #f59e0b" />
                  <stop offset="100%" style="stop-color: #10b981" />
                </linearGradient>
                <linearGradient
                  id="centerGradient"
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" style="stop-color: #6366f1" />
                  <stop offset="100%" style="stop-color: #8b5cf6" />
                </linearGradient>
              </defs>
            </svg>
          </div>
        </div>
        <h1 class="app-title">AthletaX</h1>
      </div>
      <h2 class="login-title">Welcome Back</h2>
      <p class="login-subtitle">
        Sign in to your account and continue your journey to excellence.
      </p>
    </div>

    <!-- Login Form -->
    <form class="login-form" (ngSubmit)="onLogin()" #loginForm="ngForm">
      <!-- Username Field -->
      <div class="form-group">
        <label for="username" class="form-label">
          <i class="pi pi-user field-icon"></i>
          <span class="label-text">Username</span>
          <span class="required-indicator">*</span>
        </label>
        <div class="input-wrapper">
          <input
            id="username"
            type="text"
            pInputText
            class="form-input"
            placeholder="Enter your username"
            [(ngModel)]="credentials().username"
            (ngModelChange)="onUsernameChange($event)"
            name="username"
            required
            autocomplete="username"
            [class.invalid]="!validation().username.valid && (validation().username.touched || formSubmitted())"
            [class.valid]="validation().username.valid && validation().username.touched"
          />
          <i
            class="validation-icon"
            [class.pi-check-circle]="validation().username.valid && validation().username.touched"
            [class.pi-exclamation-circle]="!validation().username.valid && (validation().username.touched || formSubmitted())"
            [class.success]="validation().username.valid && validation().username.touched"
            [class.error]="!validation().username.valid && (validation().username.touched || formSubmitted())"
          ></i>
        </div>
        <div
          class="error-message"
          *ngIf="!validation().username.valid && (validation().username.touched || formSubmitted())"
        >
          <i class="pi pi-exclamation-triangle"></i>
          {{ validation().username.message }}
        </div>
      </div>

      <!-- Password Field -->
      <div class="form-group">
        <label for="password" class="form-label">
          <i class="pi pi-lock field-icon"></i>
          <span class="label-text">Password</span>
          <span class="required-indicator">*</span>
        </label>
        <div class="password-wrapper">
          <input
            id="password"
            [type]="showPassword ? 'text' : 'password'"
            pInputText
            class="form-input password-input"
            placeholder="Enter your password"
            [(ngModel)]="credentials().password"
            (ngModelChange)="onPasswordChange($event)"
            name="password"
            required
            autocomplete="current-password"
            [class.invalid]="!validation().password.valid && (validation().password.touched || formSubmitted())"
            [class.valid]="validation().password.valid && validation().password.touched"
          />
          <button
            type="button"
            class="password-toggle"
            (click)="togglePasswordVisibility()"
            [attr.aria-label]="showPassword ? 'Hide password' : 'Show password'"
          >
            <i [class]="showPassword ? 'pi pi-eye-slash' : 'pi pi-eye'"></i>
          </button>
          <i
            class="validation-icon password-validation-icon"
            [class.pi-check-circle]="validation().password.valid && validation().password.touched"
            [class.pi-exclamation-circle]="!validation().password.valid && (validation().password.touched || formSubmitted())"
            [class.success]="validation().password.valid && validation().password.touched"
            [class.error]="!validation().password.valid && (validation().password.touched || formSubmitted())"
          ></i>
        </div>
        <div
          class="error-message"
          *ngIf="!validation().password.valid && (validation().password.touched || formSubmitted())"
        >
          <i class="pi pi-exclamation-triangle"></i>
          {{ validation().password.message }}
        </div>
      </div>

      <!-- Remember Me & Forgot Password -->
      <div class="form-options">
        <div class="remember-me">
          <input
            id="rememberMe"
            type="checkbox"
            [(ngModel)]="rememberMe"
            name="rememberMe"
          />
          <label for="rememberMe">Remember me</label>
        </div>
        <button
          type="button"
          class="forgot-password-link"
          (click)="onForgotPassword()"
        >
          Forgot password?
        </button>
      </div>
      <!-- Login Button -->
      <button
        type="submit"
        pButton
        class="login-button"
        [loading]="isLoading()"
        [disabled]="isLoading()"
        label="Sign In"
        icon="pi pi-sign-in"
      ></button>
    </form>
    <!-- Footer -->
    <div class="login-footer">
      <p class="support-text">
        Need help?
        <button type="button" class="support-link" (click)="onContactSupport()">
          Contact Support
        </button>
      </p>
    </div>
  </div>

  <!-- Toast Container -->
  <div class="toast-container">
    <div
      *ngFor="let toast of toastService.getToasts()()"
      class="toast"
      [class]="'toast-' + toast.type"
    >
      <div class="toast-icon">
        <i
          [class]="
            toast.type === 'success' ? 'pi pi-check-circle' :
            toast.type === 'error' ? 'pi pi-times-circle' :
            toast.type === 'warning' ? 'pi pi-exclamation-triangle' :
            'pi pi-info-circle'
          "
        ></i>
      </div>
      <div class="toast-content">
        <div class="toast-title">{{ toast.title }}</div>
        <div class="toast-message">{{ toast.message }}</div>
      </div>
      <button
        class="toast-close"
        (click)="toastService.remove(toast.id)"
        type="button"
      >
        <i class="pi pi-times"></i>
      </button>
    </div>
  </div>
  <!-- Background Decoration -->
  <div class="background-decoration">
    <!-- Sports Equipment Floating Elements -->
    <div class="sports-element basketball">
      <div class="basketball-lines"></div>
    </div>
    <div class="sports-element soccer-ball">
      <div class="soccer-pattern"></div>
    </div>
    <div class="sports-element tennis-ball">
      <div class="tennis-curve"></div>
    </div>

    <!-- Athletic Track Pattern -->
    <div class="track-pattern track-1"></div>
    <div class="track-pattern track-2"></div>

    <!-- Goal Posts -->
    <div class="goal-post left-goal">
      <div class="goal-frame"></div>
      <div class="goal-net"></div>
    </div>
    <div class="goal-post right-goal">
      <div class="goal-frame"></div>
      <div class="goal-net"></div>
    </div>

    <!-- Sports Field Lines -->
    <div class="field-lines">
      <div class="field-line line-1"></div>
      <div class="field-line line-2"></div>
      <div class="field-line line-3"></div>
    </div>

    <!-- Floating Shapes (kept some original ones) -->
    <div class="floating-shape shape-1"></div>
    <div class="floating-shape shape-2"></div>
  </div>
</div>
